generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  username     String?     @unique
  email        String      @unique
  password     String
  role         String      @default("user")
  positionId   String?     @db.ObjectId
  position     Position?   @relation(fields: [positionId], references: [id])
  departmentId String?     @db.ObjectId
  department   Department? @relation(fields: [departmentId], references: [id])
  supervisorId String?     @db.ObjectId
  supervisor   User?       @relation("UserSupervisor", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates User[]      @relation("UserSupervisor")
  kpis         KPI[]
}

model Position {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  users       User[]
}

model Department {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  users       User[]
}

model KPI {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  month        DateTime
  projectKPIId String     @db.ObjectId
  projectKPI   ProjectKPI @relation(fields: [projectKPIId], references: [id])
}

model Project {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  status       String
  deliverables Deliverable[] @relation("ProjectToDeliverable")
}

model Deliverable {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  progress  Float? // summation of task progress TODO: remove progress here: can be calculate by summing task percentage
  status    String
  comments  String?
  projectId String  @db.ObjectId
  project   Project @relation("ProjectToDeliverable", fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]  @relation("DeliverableToTask")
}

model Task {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  startDate     DateTime
  endDate       DateTime?
  timeSpent     Float?
  progress      Float?
  status        String
  comments      String?
  deliverableId String      @db.ObjectId
  deliverable   Deliverable @relation("DeliverableToTask", fields: [deliverableId], references: [id], onDelete: Cascade)
}

model ProjectKPI {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  status       String
  deliverables DeliverableKPI[]
  kpis         KPI[]
}

model DeliverableKPI {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  progress  Float?
  status    String
  comments  String?
  projectId String     @db.ObjectId
  project   ProjectKPI @relation(fields: [projectId], references: [id])
  tasks     TaskKPI[]
}

model TaskKPI {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  startDate     DateTime
  endDate       DateTime?
  timeSpent     Float?
  progress      Float?
  status        String
  comments      String?
  deliverableId String         @db.ObjectId
  deliverable   DeliverableKPI @relation(fields: [deliverableId], references: [id])
}

